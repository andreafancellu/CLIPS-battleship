;  ---------------------------------------------
;  --- Definizione del modulo e dei template ---
;  ---------------------------------------------
(defmodule AGENT (import MAIN ?ALL) (import ENV ?ALL) (export ?ALL))

(deftemplate my-cell ; usato localmente per tenere traccia delle mosse fatte
	(slot x)
	(slot y)
	(slot content (allowed-values water boat hit-boat))
	(slot status (allowed-values none guessed fired missed))
)

(deffacts initial-state
	(my-cell (x 0) (y 0) (content water) (status none))
	(my-cell (x 0) (y 1) (content water) (status none))
	(my-cell (x 0) (y 2) (content water) (status none))
	(my-cell (x 0) (y 3) (content water) (status none))
	(my-cell (x 0) (y 4) (content water) (status none))
	(my-cell (x 0) (y 5) (content water) (status none))
	(my-cell (x 0) (y 6) (content water) (status none))
	(my-cell (x 0) (y 7) (content water) (status none))
	(my-cell (x 0) (y 8) (content water) (status none))
	(my-cell (x 0) (y 9) (content water) (status none))
	(my-cell (x 1) (y 0) (content water) (status none))
	(my-cell (x 1) (y 1) (content water) (status none))
	(my-cell (x 1) (y 2) (content water) (status none))
	(my-cell (x 1) (y 3) (content water) (status none))
	(my-cell (x 1) (y 4) (content water) (status none))
	(my-cell (x 1) (y 5) (content water) (status none))
	(my-cell (x 1) (y 6) (content water) (status none))
	(my-cell (x 1) (y 7) (content water) (status none))
	(my-cell (x 1) (y 8) (content water) (status none))
	(my-cell (x 1) (y 9) (content water) (status none))
	(my-cell (x 2) (y 0) (content water) (status none))
	(my-cell (x 2) (y 1) (content water) (status none))
	(my-cell (x 2) (y 2) (content water) (status none))
	(my-cell (x 2) (y 3) (content water) (status none))
	(my-cell (x 2) (y 4) (content water) (status none))
	(my-cell (x 2) (y 5) (content water) (status none))
	(my-cell (x 2) (y 6) (content water) (status none))
	(my-cell (x 2) (y 7) (content water) (status none))
	(my-cell (x 2) (y 8) (content water) (status none))
	(my-cell (x 2) (y 9) (content water) (status none))
	(my-cell (x 3) (y 0) (content water) (status none))
	(my-cell (x 3) (y 1) (content water) (status none))
	(my-cell (x 3) (y 2) (content water) (status none))
	(my-cell (x 3) (y 3) (content water) (status none))
	(my-cell (x 3) (y 4) (content water) (status none))
	(my-cell (x 3) (y 5) (content water) (status none))
	(my-cell (x 3) (y 6) (content water) (status none))
	(my-cell (x 3) (y 7) (content water) (status none))
	(my-cell (x 3) (y 8) (content water) (status none))
	(my-cell (x 3) (y 9) (content water) (status none))
	(my-cell (x 4) (y 0) (content water) (status none))
	(my-cell (x 4) (y 1) (content water) (status none))
	(my-cell (x 4) (y 2) (content water) (status none))
	(my-cell (x 4) (y 3) (content water) (status none))
	(my-cell (x 4) (y 4) (content water) (status none))
	(my-cell (x 4) (y 5) (content water) (status none))
	(my-cell (x 4) (y 6) (content water) (status none))
	(my-cell (x 4) (y 7) (content water) (status none))
	(my-cell (x 4) (y 8) (content water) (status none))
	(my-cell (x 4) (y 9) (content water) (status none))
	(my-cell (x 5) (y 0) (content water) (status none))
	(my-cell (x 5) (y 1) (content water) (status none))
	(my-cell (x 5) (y 2) (content water) (status none))
	(my-cell (x 5) (y 3) (content water) (status none))
	(my-cell (x 5) (y 4) (content water) (status none))
	(my-cell (x 5) (y 5) (content water) (status none))
	(my-cell (x 5) (y 6) (content water) (status none))
	(my-cell (x 5) (y 7) (content water) (status none))
	(my-cell (x 5) (y 8) (content water) (status none))
	(my-cell (x 5) (y 9) (content water) (status none))
	(my-cell (x 6) (y 0) (content water) (status none))
	(my-cell (x 6) (y 1) (content water) (status none))
	(my-cell (x 6) (y 2) (content water) (status none))
	(my-cell (x 6) (y 3) (content water) (status none))
	(my-cell (x 6) (y 4) (content water) (status none))
	(my-cell (x 6) (y 5) (content water) (status none))
	(my-cell (x 6) (y 6) (content water) (status none))
	(my-cell (x 6) (y 7) (content water) (status none))
	(my-cell (x 6) (y 8) (content water) (status none))
	(my-cell (x 6) (y 9) (content water) (status none))
	(my-cell (x 7) (y 0) (content water) (status none))
	(my-cell (x 7) (y 1) (content water) (status none))
	(my-cell (x 7) (y 2) (content water) (status none))
	(my-cell (x 7) (y 3) (content water) (status none))
	(my-cell (x 7) (y 4) (content water) (status none))
	(my-cell (x 7) (y 5) (content water) (status none))
	(my-cell (x 7) (y 6) (content water) (status none))
	(my-cell (x 7) (y 7) (content water) (status none))
	(my-cell (x 7) (y 8) (content water) (status none))
	(my-cell (x 7) (y 9) (content water) (status none))
	(my-cell (x 8) (y 0) (content water) (status none))
	(my-cell (x 8) (y 1) (content water) (status none))
	(my-cell (x 8) (y 2) (content water) (status none))
	(my-cell (x 8) (y 3) (content water) (status none))
	(my-cell (x 8) (y 4) (content water) (status none))
	(my-cell (x 8) (y 5) (content water) (status none))
	(my-cell (x 8) (y 6) (content water) (status none))
	(my-cell (x 8) (y 7) (content water) (status none))
	(my-cell (x 8) (y 8) (content water) (status none))
	(my-cell (x 8) (y 9) (content water) (status none))
	(my-cell (x 9) (y 0) (content water) (status none))
	(my-cell (x 9) (y 1) (content water) (status none))
	(my-cell (x 9) (y 2) (content water) (status none))
	(my-cell (x 9) (y 3) (content water) (status none))
	(my-cell (x 9) (y 4) (content water) (status none))
	(my-cell (x 9) (y 5) (content water) (status none))
	(my-cell (x 9) (y 6) (content water) (status none))
	(my-cell (x 9) (y 7) (content water) (status none))
	(my-cell (x 9) (y 8) (content water) (status none))
	(my-cell (x 9) (y 9) (content water) (status none))
)

(defrule print-rows-i-know
	(k-per-row (row ?r) (num ?n))
=>
	(printout t "I know that row " ?r ", contains " ?n " pieces." crlf)
)

(defrule print-columns-i-know
	(k-per-col (col ?c) (num ?n))
=>
	(printout t "I know that col " ?c ", contains " ?n " pieces." crlf)
)

(defrule guess-sub ; se c'è una cella nota che contiene un sottomarino, allora mettici la guess. ESEGUE 20 VOLTE (perchè ho 20 esecuzioni per la guess)
	(status (step ?s)(currently running))
	(k-cell (x ?x)(y ?y)(content sub))
	(my-cell (x ?x) (y ?y) (content water) (status none))
=>
	(assert (exec (step ?s) (action guess) (x ?x) (y ?y)))
	(assert(my-cell (x ?x) (y ?y) (content boat) (status guessed)))
	(printout t "guess in pos [" ?x ", " ?y "]"  crlf)
    (pop-focus)
)






; idea per sttrategia da implementare:
; - se ci sono caselle note che contengono una barca/pezzo di barca, contrassegnale come guessed
; - non fare guess su caselle che sono all'intersezione di righe colonne entrambe con 0 su (k-per-col, k-per-row)
; - fai le fire sulle caselle in cui l'intersezione è maggiore
; - se da una fire viene fuori che la casella contiene un pezzo di barca, fai guess
; - se al passo n hai fatto fire e hai scoperto che c'è un pezzo di barca, ai passi successivi fai guess nelle caselle adiacenti
; - usa fire per decidere quale delle guess messe è quella che contiene un pezzo di barca.